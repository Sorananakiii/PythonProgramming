
###########################################################################
###### list of all keywords(reserved words) in Python Programming #########
###########################################################################

-------------------------------------------------------------------------------------------------------------------------------------
** from, import **
>>> import keyword
>>> from keyword import kwlist
>>> print(keyword.kwlist)

** as **

used to create an alias while importing a module. It means giving a different name (user-defined) to a module while importing it.
-------------------------------------------------------------------------------------------------------------------------------------
** False, True, and, or, not **

logical (Boolean)
-------------------------------------------------------------------------------------------------------------------------------------
** None **

None is a special constant in Python that represents the absence of a value or a null value.
-------------------------------------------------------------------------------------------------------------------------------------
** assert **
is used for debugging purposes

>>> a = 4
>>> assert a > 5, "The value of a is too small"

-------------------------------------------------------------------------------------------------------------------------------------
** async, await **

The async and await keywords are provided by the asyncio library in Python. They are used to write concurrent code in Python. 
For example,

>>> import asyncio

>>> async def main():
>>>     print('Hello')
>>>     await asyncio.sleep(1)
>>>     print('world')

>>> asyncio.run(main())

In the above program, the async keyword specifies that the function will be executed asynchronously.

Here, first Hello is printed. The await keyword makes the program wait for 1 second. And then the world is printed.

-------------------------------------------------------------------------------------------------------------------------------------
** for, while, break, continue, pass **
break and continue are used inside for and while loops to alter their normal behavior.
- break will stop the loop
- continue will skip the current stage in the loop

-------------------------------------------------------------------------------------------------------------------------------------
** class, def, return **
command for build function and class 

** lambda **
It is an inline function with no return command
-------------------------------------------------------------------------------------------------------------------------------------
** if, elif, else


-------------------------------------------------------------------------------------------------------------------------------------
** del **
used to delete the reference to an object. Everything is object in Python.

-------------------------------------------------------------------------------------------------------------------------------------
** except, raise, try **
used with exceptions in Python.

-------------------------------------------------------------------------------------------------------------------------------------
** in, is **	
- is  is used to test if the two variables refer to the same object.
- == operator is used to test if two variables are equal or not
- in is used to test if a sequence (list, tuple, string etc.) contains a value. It returns True if the value is present
-------------------------------------------------------------------------------------------------------------------------------------		
finally, nonlocal, global, with, yield


